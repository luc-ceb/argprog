2. Ejemplo inicial
function nroBolitasTotal() {
  return (nroBolitas(Azul) + nroBolitas(Negro) + nroBolitas(Rojo) + nroBolitas(Verde))
}


3. Aplicacion funcion
procedure MoverSegunBolitas() {
  if (nroBolitasTotal() > 10) {
    Mover(Este)
  } else {
    Mover(Norte)
  }
}

4. Definí la función todasExcepto para que retorne la cantidad de bolitas que no sean del color que se le pasa por parámetro.
function todasExcepto(color) {
  return (nroBolitasTotal()-nroBolitas(color))
}

5. Definí la función rojoEsDominante() que nos diga si la cantidad de bolitas rojas es mayor que la suma de las bolitas de los otros colores. En la Biblioteca está todasExcepto(color) lista para ser invocada.
function rojoEsDominante() {
  return (nroBolitas(Rojo)>todasExcepto(Rojo))
}

6. Definí la función esLibreCostados() que indique si el cabezal puede moverse tanto al Este como al Oeste.
function esLibreCostados() {
  return (puedeMover(Este)&&puedeMover(Oeste))
}

7. Definí la función hayAlgunaBolita() que responda a la pregunta ¿hay alguna bolita en la celda actual?
function hayAlgunaBolita() {
  return (hayBolitas(Negro)||hayBolitas(Rojo)||hayBolitas(Verde)||hayBolitas(Azul))
}

8. Definí la función estoyEnUnBorde() que determine si el cabezal está parado en algún borde.
function estoyEnUnBorde(){
  return(not puedeMover(Norte) || not puedeMover(Sur) || not puedeMover(Este) || not puedeMover(Oeste))
}

Como en la aritmética, en la lógica también existe el concepto de precedencia y ciertas operaciones se resuelven antes que otras: primero la negación (not), después la conjunción (&&) y por último la disyunción (||).

Por esta razón, la expresión not puedeMover(Norte) || not puedeMover(Este) || not puedeMover(Sur) || not puedeMover(Oeste) se puede escribir sin tener que poner paréntesis en el medio.

9. Definí la función hayBolitasAl(direccion, color) que informe si hay alguna bolita del color especificado en la celda vecina hacia la dirección dada.
function hayBolitasAl(direccion,color){
  Mover(direccion)
  return(hayBolitas(color))
}

11. Definí la función hayBolitasLejosAl(direccion, color, distancia).
function hayBolitasLejosAl(direccion, color, distancia){
  MoverN(distancia,direccion)
  return(hayBolitas(color))
}

12. Valiéndote de hayBolitasAl, definí la función estoyRodeadoDe(color) que indica si el cabezal está rodeado de bolitas de ese color.
Decimos que el cabezal "está rodeado" si hay bolitas de ese color en las cuatro direcciones: Norte, Este, Sur y Oeste.
function estoyRodeadoDe(color){
  return(hayBolitasAl(Norte, color) && hayBolitasAl(Sur, color) && hayBolitasAl(Este, color) && hayBolitasAl(Oeste, color))
}

13. Vamos a definir la función hayLimite(), que determina si hay algún tipo de límite a la hora de mover el cabezal. Usando estoyEnUnBorde y estoyRodeadoDe, definí hayLimite.
function hayLimite(){
  return(estoyEnUnBorde() || estoyRodeadoDe(Rojo))
}

